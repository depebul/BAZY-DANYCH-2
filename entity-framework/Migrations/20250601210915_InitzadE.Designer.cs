// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace entity_framework.Migrations
{
    [DbContext(typeof(ProdContext))]
    [Migration("20250601210915_InitzadE")]
    partial class InitzadE
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");

                    b.HasDiscriminator().HasValue("Company");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("InvoiceId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("InvoiceProduct", b =>
                {
                    b.Property<int>("InvoicesInvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductsProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InvoicesInvoiceId", "ProductsProductId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("InvoiceProduct");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SupplierCompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId");

                    b.HasIndex("SupplierCompanyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.HasBaseType("Company");

                    b.Property<double>("Discount")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("Supplier", b =>
                {
                    b.HasBaseType("Company");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Supplier");
                });

            modelBuilder.Entity("InvoiceProduct", b =>
                {
                    b.HasOne("Invoice", null)
                        .WithMany()
                        .HasForeignKey("InvoicesInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierCompanyId");

                    b.Navigation("Supplier");
                });
#pragma warning restore 612, 618
        }
    }
}
